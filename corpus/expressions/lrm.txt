===================================
VHDL LRM 9.1 NOTE 2
===================================
assert (and A) and B;
assert A and (and B);
assert and (and A);
---

(design_file
  (assertion_statement
    (logical_expression
      left: (parenthesized_expression
        (reduction
          argument: (simple_name)))
      right: (simple_name)))
  (assertion_statement
    (logical_expression
      left: (simple_name)
      right: (parenthesized_expression
        (reduction
          argument: (simple_name)))))
  (assertion_statement
    (reduction
      argument: (parenthesized_expression
        (reduction
          argument: (simple_name))))))

===================================
VHDL LRM 9.2.7 NOTE
===================================
assert -5 rem 2 >= 0;
---

(design_file
  (assertion_statement
    (relation
      left: (sign
        argument: (term
          left: (integer_decimal
            (integer))
          right: (integer_decimal
            (integer))))
      right: (integer_decimal
        (integer)))))

===================================
VHDL LRM 9.2.6 NOTE
===================================
assert A/(+B) > 0;
assert A**(-B) > 0;
---

(design_file
  (assertion_statement
    (relation
      left: (term
        left: (simple_name)
        right: (parenthesized_expression
          (sign
            argument: (simple_name))))
      right: (integer_decimal
        (integer))))
  (assertion_statement
    (relation
      left: (exponentiation
        left: (simple_name)
        right: (parenthesized_expression
          (sign
            argument: (simple_name))))
      right: (integer_decimal
        (integer)))))

===================================
ADA LRM 4.5.0
===================================
assert not Sunny or Warm;
---

(design_file
  (assertion_statement
    (logical_expression
      left: (factor
        argument: (simple_name))
      right: (simple_name))))

===================================
LINT: ILLEGAL - VHDL LRM 9.1 NOTE 2 I
===================================
assert and A and B;
---

(design_file
  (assertion_statement
    (logical_expression
      left: (reduction
        argument: (simple_name))
      right: (simple_name))))

===================================
LINT: ILLEGAL - VHDL LRM 9.1 NOTE 2 II
===================================
assert A and and B;
---

(design_file
  (assertion_statement
    (logical_expression
      left: (simple_name)
      right: (reduction
        argument: (simple_name)))))

===================================
ERROR: ILLEGAL - VHDL LRM 9.1 NOTE 2 III
===================================
assert and and A;
---

(design_file
  (assertion_statement
    (reduction
      (ERROR
        (identifier))
      argument: (simple_name))))

===================================
ERROR: ILLEGAL - VHDL LRM 9.2.6 NOTE IV
===================================
assert A/+B > 0;
---

(design_file
  (assertion_statement
    (relation
      left: (term
        left: (simple_name)
        right: (sign
          argument: (simple_name)))
      right: (integer_decimal
        (integer)))))

===================================
ERROR: ILLEGAL - ADA LRM 4.5.0 (plus)
===================================
assert Y** +3 > 0;
assert Y**+3 > 0;
---

(design_file
  (assertion_statement
    (relation
      left: (simple_expression
        left: (simple_name)
        (ERROR)
        right: (integer_decimal
          (integer)))
      right: (integer_decimal
        (integer))))
  (assertion_statement
    (relation
      left: (simple_expression
        left: (simple_name)
        (ERROR)
        right: (integer_decimal
          (integer)))
      right: (integer_decimal
        (integer)))))

===================================
ERROR: ILLEGAL - ADA LRM 4.5.0 (minus)
===================================
assert Y** -3 > 0;
assert Y**-3 > 0;
---

(design_file
  (assertion_statement
    (relation
      left: (simple_expression
        left: (simple_name)
        (ERROR)
        right: (integer_decimal
          (integer)))
      right: (integer_decimal
        (integer))))
   (assertion_statement
    (relation
      left: (simple_expression
        left: (simple_name)
        (ERROR)
        right: (integer_decimal
          (integer)))
      right: (integer_decimal
        (integer)))))
