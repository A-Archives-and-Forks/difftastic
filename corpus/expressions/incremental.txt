===================================
Factor
===================================
assert a**b;
---

(design_file
  (PSL_assertion_directive
    property: (exponentiation
       left: (simple_name)
      right: (simple_name))))

===================================
Term
===================================
assert a**b * c**d;
---

(design_file
  (PSL_assertion_directive
    property: (term
      left: (exponentiation
         left: (simple_name)
        right: (simple_name))
      right: (exponentiation
         left: (simple_name)
        right: (simple_name)))))

===================================
Sign
===================================
assert -a**b * c**d;
---

(design_file
  (PSL_assertion_directive
    property: (sign
      argument: (term
        left: (exponentiation
           left: (simple_name)
          right: (simple_name))
        right: (exponentiation
           left: (simple_name)
          right: (simple_name))))))

===================================
Shift expression
===================================
assert -a**b * c**d sll -a**b * c**d;
---

(design_file
  (PSL_assertion_directive
    property: (shift_expression
      left: (sign
        argument: (term
          left: (exponentiation
            left: (simple_name)
            right: (simple_name))
          right: (exponentiation
            left: (simple_name)
            right: (simple_name))))
      right: (sign
        argument: (term
          left: (exponentiation
            left: (simple_name)
            right: (simple_name))
          right: (exponentiation
            left: (simple_name)
            right: (simple_name)))))))

===================================
Relation
===================================
assert -a**b * c**d sll -a**b * c**d > -a**b * c**d sll -a**b * c**d;
---

(design_file
  (PSL_assertion_directive
    property: (relation
      left: (shift_expression
        left: (sign
          argument: (term
            left: (exponentiation
              left: (simple_name)
              right: (simple_name))
            right: (exponentiation
              left: (simple_name)
              right: (simple_name))))
        right: (sign
          argument: (term
            left: (exponentiation
              left: (simple_name)
              right: (simple_name))
            right: (exponentiation
              left: (simple_name)
              right: (simple_name)))))
      right: (shift_expression
        left: (sign
          argument: (term
            left: (exponentiation
              left: (simple_name)
              right: (simple_name))
            right: (exponentiation
              left: (simple_name)
              right: (simple_name))))
        right: (sign
          argument: (term
            left: (exponentiation
              left: (simple_name)
              right: (simple_name))
            right: (exponentiation
              left: (simple_name)
              right: (simple_name))))))))

===================================
Logical expression
===================================
assert -a**b * c**d sll -a**b * c**d >
            -a**b * c**d sll -a**b * c**d
            and
        -a**b * c**d sll -a**b * c**d >
            -a**b * c**d sll -a**b * c**d;
---

(design_file
  (PSL_assertion_directive
    property: (logical_expression
      left: (relation
        left: (shift_expression
          left: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name))))
          right: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name)))))
        right: (shift_expression
          left: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name))))
          right: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name))))))
      right: (relation
        left: (shift_expression
          left: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name))))
          right: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name)))))
        right: (shift_expression
          left: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name))))
          right: (sign
            argument: (term
              left: (exponentiation
                left: (simple_name)
                right: (simple_name))
              right: (exponentiation
                left: (simple_name)
                right: (simple_name)))))))))
