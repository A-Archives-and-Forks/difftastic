========================================
Parenthesized property
========================================
assert (p);
---

(design_file
  (PSL_assertion_directive
    property: (parenthesized_expression
      (simple_name))))

========================================
Clocked property
========================================
assert p @ rising_edge (clk);
---

(design_file
  (PSL_assertion_directive
    property: (clocked_property
      property: (simple_name)
      clock: (ambiguous_name
        prefix: (simple_name)
        (association_list
          (positional_association_element
            (actual_part
              (actual_designator
                (simple_name)))))))))

========================================
Termination property
========================================
assert p abort c;
---

(design_file
  (PSL_assertion_directive
    property: (termination_property
       property: (simple_name)
      condition: (simple_name))))

========================================
Logical property
========================================
assert a and b;
assert a or b;
assert not a;
---

(design_file
  (PSL_assertion_directive
    property: (logical_expression
      left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (logical_expression
      left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (factor
      argument: (simple_name))))


========================================
Invariance property
========================================
assert always p;
assert never p;
---

(design_file
  (PSL_assertion_directive
    property: (invariance_property
      property: (simple_name)))
  (PSL_assertion_directive
    property: (invariance_property
      property: (simple_name))))

========================================
Ocurrence property
========================================
assert next p;
assert next! p;
assert eventually! p;
---

(design_file
  (PSL_assertion_directive
    property: (ocurrence_property
      property: (simple_name)))
  (PSL_assertion_directive
    property: (ocurrence_property
      property: (simple_name)))
  (PSL_assertion_directive
    property: (ocurrence_property
      property: (simple_name))))

========================================
Bounding property (until)
========================================
assert p1 until!  p2;
assert p1 until   p2;
assert p1 until!_ p2;
assert p1 until_  p2;
---

(design_file
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name))))

========================================
Bounding property (before)
========================================
assert p1 before!  p2;
assert p1 before   p2;
assert p1 before!_ p2;
assert p1 before_  p2;
---

(design_file
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name)))
  (PSL_assertion_directive
    property: (bounding_property
       left: (simple_name)
      right: (simple_name))))

========================================
Extended ocurrence property
========================================
assert next  [1] (p);
assert next! [1] (p);
---

(design_file
  (PSL_assertion_directive
    property: (extended_ocurrence_property
      number: (integer_decimal)
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_ocurrence_property
      number: (integer_decimal)
      (parenthesized_fl_property
        (simple_name)))))

========================================
Extended ocurrence property (all)
========================================
assert next_a  [0 to 1] (p);
assert next_a! [0 to 1] (p);
---

(design_file
  (PSL_assertion_directive
    property: (extended_ocurrence_property_all
      finite_range: (ascending_range
        low: (integer_decimal)
        high: (integer_decimal))
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_ocurrence_property_all
      finite_range: (ascending_range
        low: (integer_decimal)
        high: (integer_decimal))
      (parenthesized_fl_property
        (simple_name)))))

========================================
Extended event ocurrence property
========================================
assert next_event  (c) (p);
assert next_event! (c) (p);
assert next_event  (c) [1] (p);
assert next_event! (c) [1] (p);
---

(design_file
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property
      condition: (simple_name)
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property
      condition: (simple_name)
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property
      condition: (simple_name)
      positive_number: (integer_decimal)
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property
      condition: (simple_name)
      positive_number: (integer_decimal)
      (parenthesized_fl_property
        (simple_name)))))

========================================
Extended event ocurrence property (all)
========================================
assert next_event_a  (c) [0 to 1] (p);
assert next_event_a! (c) [0 to 1] (p);
---

(design_file
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property_all
      condition: (simple_name)
      finite_positive_range: (ascending_range
        low: (integer_decimal)
        high: (integer_decimal))
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (extended_event_ocurrence_property_all
      condition: (simple_name)
      finite_positive_range: (ascending_range
        low: (integer_decimal)
        high: (integer_decimal))
      (parenthesized_fl_property
        (simple_name)))))

========================================
Suffix implication property I
========================================
assert {s} (p);
assert {s} {s} (p);
---

(design_file
  (PSL_assertion_directive
    property: (suffix_implication_property
      sequence: (braced_SERE
        (simple_name))
      (parenthesized_fl_property
        (simple_name))))
  (PSL_assertion_directive
    property: (suffix_implication_property
      sequence: (braced_SERE
        (simple_name))
      sequence: (braced_SERE
        (simple_name))
      (parenthesized_fl_property
        (simple_name)))))

========================================
Suffix implication property II
========================================
assert {s} |-> {s};
assert {s} |=> {s};
---

(design_file
  (PSL_assertion_directive
    property: (suffix_implication_property
      sequence: (braced_SERE
        (simple_name))
      property: (sequential_property
        sequence: (braced_SERE
          (simple_name)))))
  (PSL_assertion_directive
    property: (suffix_implication_property
      sequence: (braced_SERE
        (simple_name))
      property: (sequential_property
        sequence: (braced_SERE
          (simple_name))))))
