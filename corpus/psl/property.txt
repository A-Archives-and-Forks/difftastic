=============================
Property replicator
=============================
assert forall p in boolean : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        (PSL_Value_Set
          (boolean)))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Property replicator - Index Range I
=============================
assert forall p (0 to 1) in boolean : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        Index_Range: (ascending_range
          low: (integer_decimal
            (integer))
          high: (integer_decimal
            (integer)))
        (PSL_Value_Set
          (boolean)))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Replicator - Index Range II
=============================
assert forall p (1 downto 0) in boolean : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        Index_Range: (descending_range
          high: (integer_decimal
            (integer))
          low: (integer_decimal
            (integer)))
        (PSL_Value_Set
          (boolean)))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Replicator - Index Range - VHDL Range III
=============================
assert forall p (foo'range) in boolean : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        Index_Range: (range_attribute_name
          prefix: (simple_name)
          (range_attribute_designator))
        (PSL_Value_Set
          (boolean)))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Replicator - Value Set I
=============================
assert forall p in {0 to 1} : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        (PSL_Value_Set
          (ascending_range
            low: (integer_decimal
              (integer))
            high: (integer_decimal
              (integer)))))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Replicator - Value Set II
=============================
assert forall p in {0 to 1, 0 to 1} : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        (PSL_Value_Set
          (ascending_range
            low: (integer_decimal
              (integer))
            high: (integer_decimal
              (integer)))
          (ascending_range
            low: (integer_decimal
              (integer))
            high: (integer_decimal
              (integer)))))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

=============================
Replicator - Value Set - Value
=============================
assert forall p in {val} : p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Replicator
      (PSL_Parameter_Specification
        (PSL_Identifier)
        (PSL_Value_Set
          Value: (simple_name)))
      Property: (PSL_Property_Instance
        Property_Name: (PSL_Identifier)))))

===============================
Clock property
===============================
assert a @ clk;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Clocked_FL_Property
      Property: (simple_name)
         Clock: (simple_name))))

===============================
Termination property
===============================
assert a abort b;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Termination_FL_Property
      Property: (simple_name)
       Boolean: (simple_name))))

===============================
Logical expression (binary) property
===============================
assert (a->b) and b;
assert a or (a->b);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Logical_FL_Property
      left: (PSL_Parenthesized_FL_Property
        (PSL_Expression
           left: (simple_name)
          right: (simple_name)))
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Logical_FL_Property
      left: (simple_name)
      right: (PSL_Parenthesized_FL_Property
        (PSL_Expression
           left: (simple_name)
          right: (simple_name))))))

===============================
Implication property
===============================
assert (a->b) -> b;
assert a <-> (a->b);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Implication_FL_Property
      left: (PSL_Parenthesized_FL_Property
        (PSL_Expression
           left: (simple_name)
          right: (simple_name)))
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Implication_FL_Property
       left: (simple_name)
      right: (PSL_Parenthesized_FL_Property
        (PSL_Expression
           left: (simple_name)
          right: (simple_name))))))

===============================
Logical expression (unary) property
===============================
assert not (a->b);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Factor_FL_Property
      argument: (PSL_Parenthesized_FL_Property
        (PSL_Expression
           left: (simple_name)
          right: (simple_name))))))

===============================
Logical expression (combined) property
===============================
assert not (a->b) and b;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Logical_FL_Property
      left: (PSL_Factor_FL_Property
        argument: (PSL_Parenthesized_FL_Property
          (PSL_Expression
            left: (simple_name)
            right: (simple_name))))
      right: (simple_name))))


===============================
Invariance property
===============================
assert always p;
assert never p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Invariant_FL_Property
      argument: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Invariant_FL_Property
      argument: (simple_name))))

===============================
Ocurrence property
===============================
assert next p;
assert next! p;
assert eventually! p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Ocurrence_FL_Property
      argument: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Ocurrence_FL_Property
      argument: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Ocurrence_FL_Property
      argument: (simple_name))))

===============================
Bounding property
===============================
assert p until! p;
assert p until p;
assert p until!_ p;
assert p until_ p;

assert p before! p;
assert p before p;
assert p before!_ p;
assert p before p;
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Bounding_FL_Property
       left: (simple_name)
      right: (simple_name))))

===============================
Extended ocurrence property I
===============================
assert next (p);
assert next! (p);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Built_In_Function_Call
      (PSL_Built_In_Function_Name)
      (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Ocurrence_FL_Property
      argument: (parenthesized_expression
        (simple_name)))))

===============================
Extended ocurrence property II
===============================
assert next  [1] (p);
assert next! [2] (p);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
        Count: (integer_decimal (integer))
      Property: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
        Count: (integer_decimal (integer))
      Property: (simple_name))))

===============================
Extended ocurrence (all) property I
===============================
assert next_a [0 to 1] (p);
assert next_a![0 to 1] (p);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
      Count: (ascending_range
         low: (integer_decimal (integer))
        high: (integer_decimal (integer)))
      Property: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
      Count: (ascending_range
         low: (integer_decimal (integer))
        high: (integer_decimal (integer)))
      Property: (simple_name))))

===============================
Extended ocurrence event property I
===============================
assert next_event  (b) (p);
assert next_event! (b) (p);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
       Boolean: (simple_name)
      Property: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
       Boolean: (simple_name)
      Property: (simple_name))))

===============================
Extended ocurrence event property II
===============================
assert next_event  (b) [1] (p);
assert next_event! (b) [1] (p);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
       Boolean: (simple_name)
         Count: (integer_decimal (integer))
      Property: (simple_name)))
  (PSL_Assert_Directive
    Property: (PSL_Extended_Ocurrence_FL_Property
       Boolean: (simple_name)
         Count: (integer_decimal (integer))
      Property: (simple_name))))

==================================
Sequence Instantiation I  (Ambiguos)
==================================
assert p;
---

(design_file
  (assertion_statement
    condition: (simple_name)))

==================================
Property Instantiation II (Ambiguos)
==================================
assert p(a);
---

(design_file
  (assertion_statement
    condition: (ambiguous_name
      prefix: (simple_name)
      (expression_list
        expression: (simple_name)))))

==================================
Property Instantiation III
==================================
assert p (a -> b, a -> b);
---

(design_file
  (PSL_Assert_Directive
    Property: (PSL_Property_Instance
      Property_Name: (PSL_Identifier)
      (PSL_Actual_Parameter_List
        (PSL_Actual_Parameter
          (PSL_Expression
            left: (simple_name)
            right: (simple_name)))
        (PSL_Actual_Parameter
          (PSL_Expression
            left: (simple_name)
            right: (simple_name)))))))

