==========================
Procedure - Minimal
==========================
procedure p is
begin
end;

procedure p is
begin
end procedure;

procedure p is
begin
end procedure p;
---

(design_file
  (procedure_body
    (identifier))
  (procedure_body
    (identifier))
  (procedure_body
    (identifier)
    at_end: (simple_name)))

==========================
Pure function (implicit) - Minimal
==========================
function f return t is
begin
end;

function f return t is
begin
end function;

function f return t is
begin
end function f;
---

(design_file
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name)))
    at_end: (simple_name)))

==========================
Pure function (explicit) - Minimal
==========================
pure function f return t is
begin
end;

pure function f return t is
begin
end function;

pure function f return t is
begin
end function f;
---

(design_file
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name)))
    at_end: (simple_name)))

==========================
Impure function - Minimal
==========================
impure function f return t is
begin
end;

impure function f return t is
begin
end function;

impure function f return t is
begin
end function f;
---

(design_file
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name))))
  (function_body
    (identifier)
    (return
      (type_mark
        (simple_name)))
    at_end: (simple_name)))

================================
LINT: Header
================================
procedure p
    generic (k : t)
    generic map (x)
    port (s : t)    -- illegal
    port map (x);   -- illegal
---

(design_file
  (procedure_declaration
    (identifier)
    (subprogram_header
      (generic_clause
        (constant_interface_declaration
          (identifier_list
            (identifier))
          (subtype_indication
            (type_mark
              (simple_name)))))
      (generic_map_aspect
        (association_list
          (positional_association_element
            actual_part: (expression
              (simple_name)))))
      (port_clause
        (signal_interface_declaration
          (identifier_list
            (identifier))
          (subtype_indication
            (type_mark
              (simple_name)))))
      (comment)
      (port_map_aspect
        (association_list
          (positional_association_element
            actual_part: (expression
              (simple_name)))))))
  (comment))

================================
LINT: Header (semicolon)
================================
procedure p
    generic (k : t);

procedure p
    generic map (x);

procedure p
    generic (k : t)
    generic map (x);

procedure p
    generic (k : t); -- here
    generic map (x);
---

(design_file
  (procedure_declaration
    (identifier)
    (subprogram_header
      (generic_clause
        (constant_interface_declaration
          (identifier_list
            (identifier))
          (subtype_indication
            (type_mark
              (simple_name)))))))
  (procedure_declaration
    (identifier)
    (subprogram_header
      (generic_map_aspect
        (association_list
          (positional_association_element
            actual_part: (expression
              (simple_name)))))))
  (procedure_declaration
    (identifier)
    (subprogram_header
      (generic_clause
        (constant_interface_declaration
          (identifier_list
            (identifier))
          (subtype_indication
            (type_mark
              (simple_name)))))
      (generic_map_aspect
        (association_list
          (positional_association_element
            actual_part: (expression
              (simple_name)))))))
  (procedure_declaration
    (identifier)
    (subprogram_header
      (generic_clause
        (constant_interface_declaration
          (identifier_list
            (identifier))
          (subtype_indication
            (type_mark
              (simple_name))))
        (semicolon))
      (comment)
      (generic_map_aspect
        (association_list
          (positional_association_element
            actual_part: (expression
              (simple_name))))))))
