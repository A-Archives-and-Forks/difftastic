=======================================
Minimal
=======================================
procedure p;
function f return t;
function "+" return t;
---

(design_file
  (subprogram_declaration
    (procedure_specification
      (identifier)))
  (subprogram_declaration
    (pure_function_specification
      (identifier)
      (return
        (type_mark (simple_name)))))
  (subprogram_declaration
    (pure_function_specification
      (operator_symbol)
      (return
        (type_mark (simple_name))))))

=======================================
Function purity
=======================================
  pure function f return t;
impure function f return t;
---

(design_file
  (subprogram_declaration
    (pure_function_specification
      (identifier)
      (return
        (type_mark (simple_name)))))
  (subprogram_declaration
    (impure_function_specification
      (identifier)
      (return
        (type_mark (simple_name))))))

=======================================
Header - Generic clause
=======================================
procedure p
    generic (k : t);

function f
    generic (k : t) return t;
---

(design_file
  (subprogram_declaration
    (procedure_specification
      (identifier)
      (header
        (generic_clause
          (interface_constant_declaration
            (identifier_list
              (identifier))
            (subtype_indication
              (type_mark (simple_name))))))))
  (subprogram_declaration
    (pure_function_specification
      (identifier)
      (header
        (generic_clause
          (interface_constant_declaration
            (identifier_list
              (identifier))
            (subtype_indication
              (type_mark (simple_name))))))
      (return
        (type_mark (simple_name))))))

=======================================
Header - Generic Map aspect
=======================================
procedure p
    generic (k : t)
    generic map (k);

function f
    generic (k : t)
    generic map (k) return t;
---

(design_file
  (subprogram_declaration
    (procedure_specification
      (identifier)
      (header
        (generic_clause
          (interface_constant_declaration
            (identifier_list
              (identifier))
            (subtype_indication
              (type_mark (simple_name)))))
        (generic_map_aspect
          (generic_association_list
            (positional_association_element
              actual_part: (simple_name)))))))
  (subprogram_declaration
    (pure_function_specification
      (identifier)
      (header
        (generic_clause
          (interface_constant_declaration
            (identifier_list
              (identifier))
            (subtype_indication
              (type_mark (simple_name)))))
        (generic_map_aspect
          (generic_association_list
            (positional_association_element
              actual_part: (simple_name)))))
      (return
        (type_mark (simple_name))))))

================================
Header - Unexpected token (LINT)
================================
procedure p
    generic (k : t); -- here
    generic map (k);
---

(design_file
  (subprogram_declaration
    (procedure_specification
      (identifier)
      (header
        (generic_clause
          (interface_constant_declaration
            (identifier_list
              (identifier))
            (subtype_indication
              (type_mark (simple_name))))
          (semicolon))
        (comment)
        (generic_map_aspect
          (generic_association_list
            (positional_association_element
              actual_part: (simple_name))))))))
